include "global.tbh"

' Data BP Sensors Module
dim bp_sensors(NUM_SERIAL_PORTS, BP_SENSORS_MAX_ON_PORT) as BP_SENSOR
dim bp_sensorsCount(NUM_SERIAL_PORTS) as byte
dim bp_ports(NUM_SERIAL_PORTS) as BP_PORT
'dim bp_pollTime as word
dim bp_setupPollingTime as byte

' declare functions and subs
declare function CRC16(byref puchMsg as string, usDataLen as word) as word

declare sub bp_send_poll_request(port as byte, repeate as boolean)
declare sub bp_parse_packet_data(port as byte, packet as string, unitID as byte)
declare function bp_get_sensor(port as byte, unitID as byte) as byte
declare function bp_get_next_unitID_list(port as byte, byref unitID as byte, byref sensorType as BP_TYPE) as boolean
declare sub bp_get_next_unitID(port as byte, byref unitID as byte)
declare sub bp_send_request(port as byte, unitID as byte, modbusF as byte, register as word, length as word)
declare sub bp_send_find_request(port as byte)
declare function bp_modbus_check_crc(packet as string) as boolean
declare sub bp_check_noresponces(port as byte, userID as byte)
declare sub bp_add_sensor(port as byte, userId as byte, sensType as byte)
declare sub bp_delete_sensor(port as byte, sensor as byte)
declare sub bp_set_sensor_type(port as byte, unitID as byte, sensType as BP_TYPE)
declare function bp_check_already_present(port as byte, userID as byte) as boolean
declare sub bp_agg_send(port as byte, userID as byte, sensorType as BP_TYPE, data1 as word, data2 as word, data3 as word)
declare sub bp_store(port as byte)

#if BP_DEBUG_PRINT
declare sub bp_debug_print(print_data as string)
#endif
'==================================================================================
function bp_init_port(port as byte) as boolean
	
	dim i as byte
	
	' Initialize Serial Port For BP Sensors Use
	ser.num = port
	ser.enabled = NO
	ser.mode = PL_SER_MODE_UART
	ser.flowcontrol = PL_SER_FC_DISABLED
	ser.baudrate = ser.div9600/4			' 38400bps
	ser.parity = PL_SER_PR_NONE
	ser.bits = PL_SER_BB_8
	ser.interface = PL_SER_SI_HALFDUPLEX
	ser.interchardelay = BP_SENSORS_PORT_INTERCHAR_DELAY
	ser.esctype = PL_SER_ET_DISABLED
	
	bp_ports(port).enable = true

	for i = 0 to BP_SENSORS_MAX_ON_PORT - 1
		bp_sensors(port, i).UnitID = val(stg_get("BS", port * BP_SENSORS_MAX_ON_PORT + i))
		if bp_sensors(port, i).UnitID <> BP_SENSORS_MODBUS_EMPTY_ID then
			bp_sensorsCount(port) = bp_sensorsCount(port) + 1
		end if
	next

	bp_init_port = true

end function

sub bp_setup()
	
	dim i, j as byte
	
	bp_setupPollingTime = val(stg_get("BO", 0))	' Get Polling Time for BProbes
	'bp_pollTime = bp_setupPollingTime
	
	for i = 0 to NUM_SERIAL_PORTS - 1
		for j = 0 to BP_SENSORS_MAX_ON_PORT - 1
			bp_sensors(i, j).UnitID = BP_SENSORS_MODBUS_EMPTY_ID
			bp_sensors(i, j).SensorType = BP_UNKNOWN
			bp_sensors(i, j).NoResponceCount = 0
			bp_sensors(i, j).Data1 = 0
			bp_sensors(i, j).Data2 = 0
			bp_sensors(i, j).Data3 = 0
			bp_sensors(i, j).Data4 = 0
			bp_sensors(i, j).Data5 = 0
			bp_sensors(i, j).Data6 = 0
		next j
		bp_sensorsCount(i) = 0
		bp_ports(i).state = BP_PORT_STATE_NONE
		bp_ports(i).sensor.state = BP_PORT_SENSOR_STATE_NONE
		bp_ports(i).sensor.typeS = BP_UNKNOWN
		bp_ports(i).sensor.unitID = BP_SENSORS_MODBUS_EMPTY_ID
		bp_ports(i).findState = NO
		bp_ports(i).unitIDFind = BP_SENSORS_MODBUS_EMPTY_ID
		bp_ports(i).enable = false
		bp_ports(i).time = BP_SENSORS_START_TO_FIND_DELAY
	next i
	
end sub

sub bp_loop()
	
	dim i as byte
	
	'if bp_pollTime > 0 then
	'	bp_pollTime = bp_pollTime - 1
	'end if

	for i = 0 to NUM_SERIAL_PORTS - 1
		if bp_ports(i).enable then
			if bp_ports(i).time = 0 then				' Check timeout
				select case bp_ports(i).state
				case BP_PORT_STATE_NONE:				' NONE state. 
					'if bp_sensorsCount(i) > 0 then
						bp_ports(i).state = BP_PORT_STATE_POLL
					'else
					'	bp_ports(i).state = BP_PORT_STATE_FIND
					'end if
					
				case BP_PORT_STATE_FIND:				' Find Sensors After Start
					select case bp_ports(i).sensor.state
					case BP_PORT_SENSOR_STATE_NONE, BP_PORT_SENSOR_STATE_GET_REQUEST, BP_PORT_SENSOR_STATE_GET_FIND:		' Need send Find Request
						bp_send_find_request(i)
						
					end select

				case BP_PORT_STATE_POLL:
					if bp_ports(i).findState = NO then
						
						select case bp_ports(i).sensor.state
						case BP_PORT_SENSOR_STATE_NONE:		' Need send Poll Request
							bp_send_poll_request(i, false)
							
						case BP_PORT_SENSOR_STATE_GET_FIND:
							' Timeout Current Find Request to Sensor
							bp_check_noresponces(i, bp_ports(i).sensor.unitID)
							bp_ports(i).state = BP_PORT_STATE_POLL
							bp_ports(i).sensor.state = BP_PORT_SENSOR_STATE_NONE
							bp_ports(i).time = 0
						
						case BP_PORT_SENSOR_STATE_GET_REQUEST:
							' Timeout Current Poll Request to Sensor
							bp_check_noresponces(i, bp_ports(i).sensor.unitID)
							bp_ports(i).state = BP_PORT_STATE_POLL
							bp_ports(i).sensor.state = BP_PORT_SENSOR_STATE_NONE
							bp_ports(i).time = 0

						end select

				else				' Need start FIND
					bp_ports(i).state = BP_PORT_STATE_FIND
					bp_ports(i).sensor.state = BP_PORT_SENSOR_STATE_NONE
					bp_ports(i).time = 0
				end if

				end select
			else
				bp_ports(i).time = bp_ports(i).time - 1
			end if
		end if
	next i
	
	
end sub

sub bp_data_arrival(port as byte)
	
	dim packet as string
	dim sensType as word

	if bp_ports(port).enable = true then
		
		select case bp_ports(port).state
		case BP_PORT_STATE_NONE:
			' Unknown data
			ser.num = port
			ser.rxclear

		case BP_PORT_STATE_FIND:
			select case bp_ports(port).sensor.state
			case BP_PORT_SENSOR_STATE_NONE:
				' Unknown data
				ser.num = port
				ser.rxclear

			case BP_PORT_SENSOR_STATE_GET_FIND:
				' Find Responce Packet
				packet = ser.getdata(255)
				if bp_modbus_check_crc(packet) then
					' Valid modbus packet received
					if asc(left(packet, 1)) = bp_ports(port).sensor.unitID then
						' This packet from current sensor
						if len(packet) = BP_SENSORS_FIND_RESPONCE_LENGTH then	' Normal length Find Responce packet
							if (asc(mid(packet, BP_SENSORS_FIND_RESPONCE_SIGN, 1)) shl 8) + asc(mid(packet, BP_SENSORS_FIND_RESPONCE_SIGN + 1, 1)) = BP_SENSORS_SIGNATURE then ' Check SIGNATURE of TIBBO sensors
								sensType = (asc(mid(packet, BP_SENSORS_FIND_RESPONCE_TYPE, 1)) shl 8) + asc(mid(packet, BP_SENSORS_FIND_RESPONCE_TYPE + 1, 1))		' get sensor type
								if sensType = BP_SENSORS_TYPE_TEMP
								or sensType = BP_SENSORS_TYPE_TEMPHUM 
								or sensType = BP_SENSORS_TYPE_LIGHT 
								or sensType = BP_SENSORS_TYPE_ACLRM then		' check sensor type
									bp_add_sensor(port, bp_ports(port).sensor.unitID, sensType)
									'bp_send_find_request(port)
									bp_send_poll_request(port, true)
								else
									#if BP_DEBUG_PRINT
										bp_debug_print("Found BP UserID:" + str(bp_ports(port).sensor.unitID) + ", Unkn type:" + str(sensType))
									#endif
								end if
							end if
						end if
					end if
				end if

			case BP_PORT_SENSOR_STATE_GET_REQUEST:
				packet = ser.getdata(255)
				if bp_modbus_check_crc(packet) then
					' Valid modbus packet received
					if asc(left(packet, 1)) = bp_ports(port).sensor.unitID then
						' This packet from current sensor
						#if BP_DEBUG_PRINT
							select case bp_ports(port).sensor.typeS
							case BP_SENSOR_TEMP:
								bp_debug_print("Responce in Find BP UserID:" + str(bp_ports(port).sensor.unitID) + ", type: Temp")
							case BP_SENSOR_TEMPHUM:
								bp_debug_print("Responce in Find BP UserID:" + str(bp_ports(port).sensor.unitID) + ", type: TempHum")
							case BP_SENSOR_LIGHT:
								bp_debug_print("Responce in Find BP UserID:" + str(bp_ports(port).sensor.unitID) + ", type: Light")
							case BP_SENSOR_ACLRT:
								bp_debug_print("Responce in Find BP UserID:" + str(bp_ports(port).sensor.unitID) + ", type: Accelerometer")
							case else:
								bp_debug_print("Responce in Find BP UserID:" + str(bp_ports(port).sensor.unitID) + ", Unkn type:" + str(bp_ports(port).sensor.typeS))
							end select
						#endif

						' Parse data
						bp_parse_packet_data(port, packet, bp_ports(port).sensor.unitID)
						
						bp_send_find_request(port)
						exit sub
					end if
				end if
				
			end select
			
		case BP_PORT_STATE_POLL:
			select case bp_ports(port).sensor.state
			case BP_PORT_SENSOR_STATE_NONE:
				' Unknown data
				ser.num = port
				ser.rxclear

			case BP_PORT_SENSOR_STATE_GET_FIND:
				'Get Type request
				packet = ser.getdata(255)
				if bp_modbus_check_crc(packet) then
					' Valid modbus packet received
					if asc(left(packet, 1)) = bp_ports(port).sensor.unitID then
						' This packet from current sensor
						if len(packet) = BP_SENSORS_FIND_RESPONCE_LENGTH then	' Normal length Find Responce packet
							if (asc(mid(packet, BP_SENSORS_FIND_RESPONCE_SIGN, 1)) shl 8) + asc(mid(packet, BP_SENSORS_FIND_RESPONCE_SIGN + 1, 1)) = BP_SENSORS_SIGNATURE then ' Check SIGNATURE of TIBBO sensors
								sensType = (asc(mid(packet, BP_SENSORS_FIND_RESPONCE_TYPE, 1)) shl 8) + asc(mid(packet, BP_SENSORS_FIND_RESPONCE_TYPE + 1, 1))		' get sensor type
								if sensType = BP_SENSORS_TYPE_TEMP
								or sensType = BP_SENSORS_TYPE_TEMPHUM 
								or sensType = BP_SENSORS_TYPE_LIGHT 
								or sensType = BP_SENSORS_TYPE_ACLRM then		' check sensor type
									bp_set_sensor_type(port, bp_ports(port).sensor.unitID, sensType)
									bp_send_poll_request(port, true)
									exit sub
								else
									#if BP_DEBUG_PRINT
										bp_debug_print("GetType BP UserID:" + str(bp_ports(port).sensor.unitID) + ", Unkn type:" + str(sensType))
									#endif
								end if
							end if
						end if
					end if
				end if
				bp_check_noresponces(port, bp_ports(port).sensor.unitID)

			case BP_PORT_SENSOR_STATE_GET_REQUEST:
				' Poll Responce Packet
				packet = ser.getdata(255)
				if bp_modbus_check_crc(packet) then
					' Valid modbus packet received
					if asc(left(packet, 1)) = bp_ports(port).sensor.unitID then
						' This packet from current sensor
						#if BP_DEBUG_PRINT
							select case bp_ports(port).sensor.typeS
							case BP_SENSOR_TEMP:
								bp_debug_print("Responce BP UserID:" + str(bp_ports(port).sensor.unitID) + ", type: Temp")
							case BP_SENSOR_TEMPHUM:
								bp_debug_print("Responce BP UserID:" + str(bp_ports(port).sensor.unitID) + ", type: TempHum")
							case BP_SENSOR_LIGHT:
								bp_debug_print("Responce BP UserID:" + str(bp_ports(port).sensor.unitID) + ", type: Light")
							case BP_SENSOR_ACLRT:
								bp_debug_print("Responce BP UserID:" + str(bp_ports(port).sensor.unitID) + ", type: Accelerometer")
							case else:
								bp_debug_print("Responce BP UserID:" + str(bp_ports(port).sensor.unitID) + ", Unkn type:" + str(bp_ports(port).sensor.typeS))
							end select
						#endif

						' Parse data
						bp_parse_packet_data(port, packet, bp_ports(port).sensor.unitID)
						
						bp_send_poll_request(port, false)
						exit sub
					end if
				end if
				bp_check_noresponces(port, bp_ports(port).sensor.unitID)
				
			end select
			
		end select
	end if
	
end sub

sub bp_parse_packet_data(port as byte, packet as string, unitID as byte)

	dim index as byte
	dim dataLen as byte
	
	index = bp_get_sensor(port, unitID)
	if index <> BP_SENSORS_GET_SENSOR_NOT_FOUND then
		if len(packet) > 6 then
			dataLen = asc(mid(packet, 3, 1)) 			' Len data in packet
			if len(packet) = dataLen + BP_MODBUS_RESPONCE_SYS_LEN then
				' Packet is valid len
				bp_sensors(port, index).NoResponceCount = 0

				select case bp_sensors(port, index).SensorType
				case BP_SENSOR_TEMP:
					if dataLen = 4 then
						bp_sensors(port, index).Data1 = (asc(mid(packet, 4, 1)) shl 8) + asc(mid(packet, 5, 1))
						bp_sensors(port, index).Data2 = (asc(mid(packet, 6, 1)) shl 8) + asc(mid(packet, 7, 1))
						bp_agg_send(port, unitID, bp_sensors(port, index).SensorType, bp_sensors(port, index).Data1, 0, 0)
					else
						bp_check_noresponces(port, unitID)
					end if
					
				case BP_SENSOR_TEMPHUM:
					if dataLen = 12 then
						bp_sensors(port, index).Data1 = (asc(mid(packet, 4, 1)) shl 8) + asc(mid(packet, 5, 1))
						bp_sensors(port, index).Data2 = (asc(mid(packet, 6, 1)) shl 8) + asc(mid(packet, 7, 1))
						bp_sensors(port, index).Data3 = (asc(mid(packet, 12, 1)) shl 8) + asc(mid(packet, 13, 1))
						bp_sensors(port, index).Data4 = (asc(mid(packet, 14, 1)) shl 8) + asc(mid(packet, 15, 1))
						bp_agg_send(port, unitID, bp_sensors(port, index).SensorType, bp_sensors(port, index).Data1, bp_sensors(port, index).Data3, 0)
					else
						bp_check_noresponces(port, unitID)
					end if
					
				case BP_SENSOR_LIGHT:
					if dataLen = 4 then
						bp_sensors(port, index).Data1 = (asc(mid(packet, 4, 1)) shl 8) + asc(mid(packet, 5, 1))
						bp_sensors(port, index).Data2 = (asc(mid(packet, 6, 1)) shl 8) + asc(mid(packet, 7, 1))
						bp_agg_send(port, unitID, bp_sensors(port, index).SensorType, bp_sensors(port, index).Data1, 0, 0)
					else
						bp_check_noresponces(port, unitID)
					end if
					
				case BP_SENSOR_ACLRT:
					if dataLen = 12 then
						bp_sensors(port, index).Data1 = (asc(mid(packet, 4, 1)) shl 8) + asc(mid(packet, 5, 1))
						bp_sensors(port, index).Data2 = (asc(mid(packet, 6, 1)) shl 8) + asc(mid(packet, 7, 1))
						bp_sensors(port, index).Data3 = (asc(mid(packet, 8, 1)) shl 8) + asc(mid(packet, 9, 1))
						bp_sensors(port, index).Data4 = (asc(mid(packet, 10, 1)) shl 8) + asc(mid(packet, 11, 1))
						bp_sensors(port, index).Data5 = (asc(mid(packet, 12, 1)) shl 8) + asc(mid(packet, 13, 1))
						bp_sensors(port, index).Data6 = (asc(mid(packet, 14, 1)) shl 8) + asc(mid(packet, 15, 1))
						bp_agg_send(port, unitID, bp_sensors(port, index).SensorType, bp_sensors(port, index).Data1, bp_sensors(port, index).Data3, bp_sensors(port, index).Data5)
					else
						bp_check_noresponces(port, unitID)
					end if
					
				end select
			end if
		else
			' Unknown responce
			bp_check_noresponces(port, unitID)
		end if
	end if

end sub

sub bp_check_noresponces(port as byte, unitID as byte)
	
	dim sensor as byte
	
	sensor = bp_get_sensor(port, unitID)
	if sensor <> BP_SENSORS_GET_SENSOR_NOT_FOUND then
		bp_sensors(port, sensor).NoResponceCount = bp_sensors(port, sensor).NoResponceCount + 1
		if bp_sensors(port, sensor).NoResponceCount >= BP_SENSORS_POLL_MAX_NORESPONCES then
			bp_delete_sensor(port, sensor)
		end if
	end if

end sub

function bp_get_sensor(port as byte, unitID as byte) as byte
	
	dim i as byte
	
	bp_get_sensor = BP_SENSORS_GET_SENSOR_NOT_FOUND
	
	for i = 0 to BP_SENSORS_MAX_ON_PORT - 1
		if bp_sensors(port, i).UnitID = unitID then
			bp_get_sensor = i
			exit function
		end if
	next i

end function

sub bp_send_poll_request(port as byte, repeate as boolean)
	
	dim sensorType as BP_TYPE

	if repeate = false then
		if bp_get_next_unitID_list(port, bp_ports(port).sensor.unitID, sensorType) = false then
			bp_ports(port).state = BP_PORT_STATE_POLL
			bp_ports(port).sensor.unitID = BP_SENSORS_MODBUS_EMPTY_ID
			bp_ports(port).sensor.state = BP_PORT_SENSOR_STATE_NONE
			bp_ports(port).time = bp_setupPollingTime
			'bp_pollTime = bp_setupPollingTime
			exit sub
		end if
	else
		sensorType = bp_sensors(port, bp_get_sensor(port, bp_ports(port).sensor.unitID)).SensorType
	end if
		
	select case sensorType
	case BP_UNKNOWN:				' Need get Type
		bp_send_request(port, bp_ports(port).sensor.unitID, BP_SENSORS_MODBUS_F_READ_HOLDING_REGISTER, BP_SENSORS_FIND_REQUEST_REGISTER, BP_SENSORS_FIND_REQUEST_LENGTH)
		
	case BP_SENSOR_TEMP:
		bp_send_request(port, bp_ports(port).sensor.unitID, BP_SENSORS_MODBUS_F_READ_INPUT_REGISTER, BP_SENSORS_POLL_REQUEST_REGISTER_TEMP, BP_SENSORS_POLL_REQUEST_REGISTER_TEMP_LENGTH)
		
	case BP_SENSOR_TEMPHUM:
		bp_send_request(port, bp_ports(port).sensor.unitID, BP_SENSORS_MODBUS_F_READ_INPUT_REGISTER, BP_SENSORS_POLL_REQUEST_REGISTER_TEMPHUM, BP_SENSORS_POLL_REQUEST_REGISTER_TEMPHUM_LENGTH)
		
	case BP_SENSOR_LIGHT:
		bp_send_request(port, bp_ports(port).sensor.unitID, BP_SENSORS_MODBUS_F_READ_INPUT_REGISTER, BP_SENSORS_POLL_REQUEST_REGISTER_LIGHT, BP_SENSORS_POLL_REQUEST_REGISTER_LIGHT_LENGTH)
		
	case BP_SENSOR_ACLRT:
		bp_send_request(port, bp_ports(port).sensor.unitID, BP_SENSORS_MODBUS_F_READ_INPUT_REGISTER, BP_SENSORS_POLL_REQUEST_REGISTER_ACLRM, BP_SENSORS_POLL_REQUEST_REGISTER_ACLRM_LENGTH)

	end select
	
	if sensorType <> BP_UNKNOWN then
		bp_ports(port).sensor.state = BP_PORT_SENSOR_STATE_GET_REQUEST
		bp_ports(port).sensor.typeS = sensorType
		bp_ports(port).time = BP_SENSORS_POLL_REQUEST_TIMEOUT
	else
		bp_ports(port).sensor.state = BP_PORT_SENSOR_STATE_GET_FIND
		bp_ports(port).time = BP_SENSORS_POLL_REQUEST_TIMEOUT
	end if
	
end sub

sub bp_start_find()
	
	dim i as byte 
	dim port as byte
	port = val(get_http_argument(sock.httprqstring,"port="))
	
	if port >= 0 and port < NUM_SERIAL_PORTS then
		if bp_ports(port).enable = true then
			for i = 0 to BP_SENSORS_MAX_ON_PORT - 1
				bp_sensors(port, i).UnitID = BP_SENSORS_MODBUS_EMPTY_ID
				bp_sensors(port, i).SensorType = BP_UNKNOWN
				bp_sensors(port, i).NoResponceCount = 0
			next

			bp_ports(port).findState = YES
			bp_ports(port).unitIDFind = BP_SENSORS_MODBUS_EMPTY_ID
			bp_sensorsCount(port) = 0
		end if
	end if
	

end sub

sub bp_send_find_request(port as byte)

	if bp_sensorsCount(port) < BP_SENSORS_MAX_ON_PORT then
		bp_get_next_unitID(port, bp_ports(port).unitIDFind)
		if bp_ports(port).unitIDFind <> BP_SENSORS_MODBUS_EMPTY_ID then
			bp_ports(port).sensor.unitID = bp_ports(port).unitIDFind
			bp_send_request(port, bp_ports(port).sensor.unitID, BP_SENSORS_MODBUS_F_READ_HOLDING_REGISTER, BP_SENSORS_FIND_REQUEST_REGISTER, BP_SENSORS_FIND_REQUEST_LENGTH)

			bp_ports(port).sensor.state = BP_PORT_SENSOR_STATE_GET_FIND
			bp_ports(port).time = BP_SENSORS_FIND_REQUEST_TIMEOUT
		else		' End modbus find
			bp_ports(port).findState = NO
			bp_ports(port).unitIDFind = BP_SENSORS_MODBUS_EMPTY_ID
			bp_ports(port).state = BP_PORT_STATE_POLL
			bp_ports(port).sensor.unitID = BP_SENSORS_MODBUS_EMPTY_ID
			bp_ports(port).sensor.state = BP_PORT_SENSOR_STATE_NONE
			bp_ports(port).time = 0
			bp_store(port)
		end if
	else
		' Max sensors finded
		bp_ports(port).state = BP_PORT_STATE_POLL
		bp_ports(port).sensor.unitID = BP_SENSORS_MODBUS_EMPTY_ID
		bp_ports(port).sensor.state = BP_PORT_SENSOR_STATE_NONE
		bp_ports(port).time = 0
	end if

end sub

sub bp_send_request(port as byte, unitID as byte, modbusF as byte, register as word, length as word)
' Send Modbus Request

	dim packet as string(8)
	dim crc as word
	
	if bp_ports(port).enable = true then
		packet = chr(unitID) 															' set UnitID address
		packet = packet + chr(modbusF)													' set Function
		packet = packet + chr((register shr 8) and &Hff) + chr(register and &Hff)		' set first register
		packet = packet + chr((length shr 8) and &Hff) + chr(length and &Hff)			' set length
		crc = CRC16(packet, len(packet))												' get CRC16
		packet = packet + chr(crc shr 8) + chr(crc and &Hff)							' set CRC16
		
		ser.num = port
		ser.setdata(packet)
		ser.send()
	end if

end sub

function bp_get_next_unitID_list(port as byte, byref unitID as byte, byref sensorType as BP_TYPE) as boolean

	dim i as byte
	dim nxt as boolean
	
	bp_get_next_unitID_list = false
	nxt = false
	sensorType = BP_UNKNOWN
	'unitID = BP_SENSORS_MODBUS_EMPTY_ID
	
	for i = 0 to BP_SENSORS_MAX_ON_PORT - 1
		if bp_sensors(port, i).UnitID <> BP_SENSORS_MODBUS_EMPTY_ID then
			if unitID = BP_SENSORS_MODBUS_EMPTY_ID then
				unitID = bp_sensors(port, i).UnitID
				sensorType = bp_sensors(port, i).SensorType
				bp_get_next_unitID_list = true
				exit function
			else
				if unitID = bp_sensors(port, i).UnitID then
					nxt = true
					'if bp_sensors(port, i).SensorType = BP_UNKNOWN and bp_sensors(port, i).NoResponceCount >= BP_SENSORS_POLL_MAX_NORESPONCES then		' Need delete this row
					'	bp_sensors(port, i).UnitID = BP_SENSORS_MODBUS_EMPTY_ID
					'	bp_sensors(port, i).NoResponceCount = 0
					'end if
				else
					if nxt then
						unitID = bp_sensors(port, i).UnitID
						sensorType = bp_sensors(port, i).SensorType
						bp_get_next_unitID_list = true
						exit function
					end if
				end if
			end if
		end if
	next i

end function

sub bp_get_next_unitID(port as byte, byref unitID as byte)
	
	if unitID < BP_SENSORS_MODBUS_MIN_ID then
		unitID = BP_SENSORS_MODBUS_MIN_ID
	else
		if unitID < BP_SENSORS_MODBUS_MAX_ID then
			unitID = unitID + 1
		else
			unitID = BP_SENSORS_MODBUS_EMPTY_ID
		end if
	end if

end sub

function bp_modbus_check_crc(packet as string) as boolean
	
	dim crc as word
	
	crc = CRC16(packet, len(packet) - 2)
	
	if crc = (asc(mid(packet, len(packet) - 1, 1)) shl 8) + asc(mid(packet, len(packet), 1)) then
		bp_modbus_check_crc = true
	else
		bp_modbus_check_crc = false
	end if
	
end function

sub bp_store(port as byte)

	dim i as byte
	
	for i = 0 to BP_SENSORS_MAX_ON_PORT - 1
		' Store Sensor to EEPROM
		stg_set("BS", port * BP_SENSORS_MAX_ON_PORT + i, str(bp_sensors(port, i).UnitID))
	next i

end sub

sub bp_add_sensor(port as byte, userID as byte, sensType as byte)
	
	dim i as byte
	
	if bp_sensorsCount(port) < BP_SENSORS_MAX_ON_PORT then
		
		' check for already present in list
		if bp_check_already_present(port, userID) = false then
			' Not in list
			' Seach first empty row
			for i = 0 to BP_SENSORS_MAX_ON_PORT - 1
				if bp_sensors(port, i).UnitID = BP_SENSORS_MODBUS_EMPTY_ID then
					bp_sensors(port, i).UnitID = userID
					bp_sensors(port, i).SensorType = sensType
					bp_sensors(port, i).NoResponceCount = 0
					bp_sensors(port, i).Data1 = 0
					bp_sensors(port, i).Data2 = 0
					bp_sensors(port, i).Data3 = 0
					bp_sensors(port, i).Data4 = 0
					bp_sensors(port, i).Data5 = 0
					bp_sensors(port, i).Data6 = 0
					bp_sensorsCount(port) = bp_sensorsCount(port) + 1
					
					#if BP_DEBUG_PRINT
						bp_debug_print("New BP UserID:" + str(bp_sensors(port, i).UnitID) + ", type:" + str(bp_sensors(port, i).SensorType) + ", to row:" + str(i))
					#endif
					
					exit sub
				end if
			next i
		end if
		
	end if
	
end sub

sub bp_delete_sensor(port as byte, sensor as byte)
	
	if sensor <= BP_SENSORS_MAX_ON_PORT and bp_sensorsCount(port) > 0 then
		if bp_sensors(port, sensor).UnitID <> BP_SENSORS_MODBUS_EMPTY_ID then

			#if BP_DEBUG_PRINT
				bp_debug_print("Delete BP UserID:" + str(bp_sensors(port, sensor).UnitID) + ", type:" + str(bp_sensors(port, sensor).SensorType) + ", to row:" + str(sensor))
			#endif
			
			bp_sensors(port, sensor).SensorType = BP_UNKNOWN
			bp_sensors(port, sensor).Data1 = 0
			bp_sensors(port, sensor).Data2 = 0
			bp_sensors(port, sensor).Data3 = 0
			bp_sensors(port, sensor).Data4 = 0
			bp_sensors(port, sensor).Data5 = 0
			bp_sensors(port, sensor).Data6 = 0
			bp_sensorsCount(port) = bp_sensorsCount(port) - 1
			
			' Delete Sensor from EEPROM
			stg_set("BS", port * BP_SENSORS_MAX_ON_PORT + sensor, str(BP_SENSORS_MODBUS_EMPTY_ID))

		end if
	end if
	
end sub

sub bp_set_sensor_type(port as byte, unitID as byte, sensType as BP_TYPE)
	
	dim sensor as byte
	
	sensor = bp_get_sensor(port, unitID)
	if sensor <> BP_SENSORS_GET_SENSOR_NOT_FOUND then
		bp_sensors(port, sensor).SensorType = sensType
	end if

end sub

function bp_check_already_present(port as byte, userID as byte) as boolean
	
	dim i as byte
	
	bp_check_already_present = false
	
	for i = 0 to BP_SENSORS_MAX_ON_PORT - 1
		
		if bp_sensors(port, i).UnitID = userID then
			bp_check_already_present = true
			exit function
		end if
		
	next i
	
end function

sub bp_agg_send(port as byte, userID as byte, sensorType as BP_TYPE, data1 as word, data2 as word, data3 as word)

	if login_mode = CMD_MODE_AGGREGATE and param_aggEvents.agg_eventBP = true then
		dim sEvent as string
		
		sEvent = ""
		agg_record_encode(sEvent, str(port))												' Port number
		agg_record_encode(sEvent, str(userID))												' userID
		agg_record_encode(sEvent, str(sensorType))											' Sensor Type
		agg_record_encode(sEvent, str(data1))													' Data1 value
		agg_record_encode(sEvent, str(data2))													' Data2 value
		agg_record_encode(sEvent, str(data3))													' Data3 value
		agg_fire_instant_event("", "bp", sEvent, 2)
	end if

end sub

function bp_get_type(port as byte, number as byte) as BP_TYPE
	
	if port < 0 or port > NUM_SERIAL_PORTS then 
		bp_get_type = BP_UNKNOWN
	else
		if number < 0 or number > BP_SENSORS_MAX_ON_PORT then
			bp_get_type = BP_UNKNOWN
		else
		
			bp_get_type = bp_sensors(port, number).SensorType
	
		end if
	end if
	
end function

function bp_get_id(port as byte, number as byte) as byte

	if port < 0 or port > NUM_SERIAL_PORTS then 
		bp_get_id = BP_UNKNOWN
	else
		if number < 0 or number > BP_SENSORS_MAX_ON_PORT then
			bp_get_id = BP_UNKNOWN
		else
		
			bp_get_id = bp_sensors(port, number).UnitID
	
		end if
	end if
	
end function

function bp_get_find(port as byte) as byte

	if port < 0 or port > NUM_SERIAL_PORTS then 
		bp_get_find = BP_UNKNOWN
	else
		
		bp_get_find = bp_ports(port).findState
	
	end if
	
end function

#if BP_DEBUG_PRINT
sub bp_debug_print(print_data as string)
	sys.debugprint("BP> " + print_data + CR_LF)
end sub
#endif