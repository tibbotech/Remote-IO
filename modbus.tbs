include "global.tbh"

declare sub modbus_tcp_send(socket as byte, transactionId as word, protocolId as word, modbusUnitId as byte, modbusFunction as modbusFunc, byref data as string)
declare function modbus_get_input_register(register as word) as word
declare function modbus_get_holding_register(register as word) as word
declare function modbus_set_holding_register(register as word, value as word) as boolean

'	Define MODBUS UnitID for TCP
'#define MODBUSUNITID 1

	dim modbus_socks(MODBUS_SOCKS_MAX) as modbus_socket

function modbus_initialize() as boolean

	dim i as byte
	dim ports as string(4)
	dim result as boolean
	
	ports = "502"
	result = true
	
	for i = 0 to MODBUS_SOCKS_MAX - 1

		' Allocation SOCKET for modbus 
		modbus_socks(i).socket = sock_get("MBI" + str(i))
		
		' Open SOCKET 
		sock.num = modbus_socks(i).socket
		sock.protocol = PL_SOCK_PROTOCOL_TCP
		sock.localportlist = ports
		sock.connectiontout = 600
		sock.allowedinterfaces = "NET,WLN"
		sock.inconmode = PL_SOCK_INCONMODE_ANY_IP_ANY_PORT
		sock.reconmode = PL_SOCK_RECONMODE_0
		
		' Allocation buffers
		if sock.txbuffrq(3) <> 3 or sock.rxbuffrq(3) <> 3 then
			modbus_initialize = false
			exit function
		end if
		sys.buffalloc
		
	next i

	modbus_initialize = true
	
end function

function modbus_get_bp_data(port as byte, register as byte) as word

	dim tmp as byte
	
	tmp = register mod 6
	select case tmp
	case 0:
		modbus_get_bp_data = bp_sensors(port, register / 6).Data1
	case 1:
		modbus_get_bp_data = bp_sensors(port, register / 6).Data2
	case 2:
		modbus_get_bp_data = bp_sensors(port, register / 6).Data3
	case 3:
		modbus_get_bp_data = bp_sensors(port, register / 6).Data4
	case 4:
		modbus_get_bp_data = bp_sensors(port, register / 6).Data5
	case 5:
		modbus_get_bp_data = bp_sensors(port, register / 6).Data6
	case else:
		modbus_get_bp_data = 0
	end select
end function

sub modbus_tcp_receive(byref data as string, socketTCP as byte)
	
	dim transactionId as word
	dim protocolId as word
	dim length as word
	dim modbusFunction as modbusFunc
	dim modbusStartReference as word
	dim modbusCount as word
	dim modbusLenMultipleData as word
	dim modbusValue as word
	dim modbusUnitId as byte
	dim i, j, k as word
	dim str_modbus as string
	dim FloatAsDWord as dword
	dim modbusBits as byte
	
	if len(data) < 8 then exit sub

	transactionId = asc(mid(data, 1, 1)) * 256 + asc(mid(data, 2, 1))
	
	protocolId = asc(mid(data, 3, 1)) * 256 + asc(mid(data, 4, 1))
	
	if protocolId <> 0 then exit sub
	
	length = asc(mid(data, 5, 1)) * 256 + asc(mid(data, 6, 1))
	
	modbusUnitId = asc(mid(data, 7, 1))

#ifdef MODBUSUNITID
	if modbusUnitId = MODBUSUNITID then
#endif

		modbusFunction = asc(mid(data, 8, 1))
		
		select case modbusFunction
		case ReadCoilStatus:				' Read DO
			if length = 6 and len(data) = 12 then
				modbusStartReference = asc(mid(data, 9, 1)) * 256 + asc(mid(data, 10, 1))
				modbusCount = asc(mid(data, 11, 1)) * 256 + asc(mid(data, 12, 1))
				' Check length 
				modbusLenMultipleData = modbusCount / 8
				if modbusCount mod 8 <> 0 then
					modbusLenMultipleData = modbusLenMultipleData + 1
				end if

				str_modbus = str_modbus + chr(modbusLenMultipleData)
				j = 1
				k = 0
				modbusBits = 0
				for i = 1 to modbusCount
					if (modbusStartReference < NUM_OF_IO) then
						if param_io(modbusStartReference).io_state = true then
							modbusBits = modbusBits or j
						end if
					end if
					modbusStartReference = modbusStartReference + 1
					if j = 128 then
						j = 1
						k = k + 1
						str_modbus = str_modbus + chr(modbusBits)
						modbusBits = 0
					else
						j = j shl 1
					end if
				next i
				if j <> 1 then
					str_modbus = str_modbus + chr(modbusBits)
				end if
				modbus_tcp_send(socketTCP, transactionId, protocolId, modbusUnitId, modbusFunction, str_modbus)
			end if
			
		case ReadInputStatus:				' Read DI
			if length = 6 and len(data) = 12 then
				modbusStartReference = asc(mid(data, 9, 1)) * 256 + asc(mid(data, 10, 1))
				modbusCount = asc(mid(data, 11, 1)) * 256 + asc(mid(data, 12, 1))
				' Check length 
				modbusLenMultipleData = modbusCount / 8
				if modbusCount mod 8 <> 0 then
					modbusLenMultipleData = modbusLenMultipleData + 1
				end if

				str_modbus = str_modbus + chr(modbusLenMultipleData)
				j = 1
				k = 0
				modbusBits = 0
				for i = 1 to modbusCount
					if (modbusStartReference < NUM_OF_IO) then
						if param_io(modbusStartReference).io_state = true then
							modbusBits = modbusBits or j
						end if
					end if
					modbusStartReference = modbusStartReference + 1
					if j = 128 then
						j = 1
						k = k + 1
						str_modbus = str_modbus + chr(modbusBits)
						modbusBits = 0
					else
						j = j shl 1
					end if
				next i
				if j <> 1 then
					str_modbus = str_modbus + chr(modbusBits)
				end if
				modbus_tcp_send(socketTCP, transactionId, protocolId, modbusUnitId, modbusFunction, str_modbus)
			end if
			
		case ReadHoldingRegisters:			' Read AO
			if length = 6 and len(data) = 12 then
				modbusStartReference = asc(mid(data, 9, 1)) * 256 + asc(mid(data, 10, 1))
				modbusCount = asc(mid(data, 11, 1)) * 256 + asc(mid(data, 12, 1))
				str_modbus = chr((modbusCount*2 and &Hff))
				for i = modbusStartReference to modbusStartReference + modbusCount - 1
					modbusValue = modbus_get_holding_register(i)
					str_modbus = str_modbus + chr((modbusValue shr 8) and &Hff) + chr(modbusValue and &Hff)
				next i
				modbus_tcp_send(socketTCP, transactionId, protocolId, modbusUnitId, modbusFunction, str_modbus)
			end if
			
		case ReadInputRegisters:			' Read AI
			if length = 6 and len(data) = 12 then
				modbusStartReference = asc(mid(data, 9, 1)) * 256 + asc(mid(data, 10, 1))
				modbusCount = asc(mid(data, 11, 1)) * 256 + asc(mid(data, 12, 1))
				str_modbus = chr((modbusCount*2 and &Hff))
				for i = modbusStartReference to modbusStartReference + modbusCount - 1
					modbusValue = modbus_get_input_register(i)
					str_modbus = str_modbus + chr((modbusValue shr 8) and &Hff) + chr(modbusValue and &Hff)
				next i
				modbus_tcp_send(socketTCP, transactionId, protocolId, modbusUnitId, modbusFunction, str_modbus)
			end if
			
		case ForceSingleCoil:				' Write DO
			if length = 6 and len(data) = 12 then
				modbusStartReference = asc(mid(data, 9, 1)) * 256 + asc(mid(data, 10, 1))
				modbusValue = asc(mid(data, 11, 1)) * 256 + asc(mid(data, 12, 1))
				if modbusStartReference >= 0 and modbusStartReference < NUM_OF_IO then
					if modbusValue = &hFF00 then modbusValue = 1
					if io_set(modbusStartReference, modbusValue) = true then
						modbus_tcp_send(socketTCP, transactionId, protocolId, modbusUnitId, modbusFunction, mid(data, 9, 4))
					end if
				end if
			end if
		
		case PresetSingleRegister:			' Write AO
			if length = 6 and len(data) = 12 then
				modbusStartReference = asc(mid(data, 9, 1)) * 256 + asc(mid(data, 10, 1))
				modbusValue = asc(mid(data, 11, 1)) * 256 + asc(mid(data, 12, 1))
				if modbus_set_holding_register(modbusStartReference, modbusValue) = true then
					modbus_tcp_send(socketTCP, transactionId, protocolId, modbusUnitId, modbusFunction, mid(data, 9, 4))
				end if
			end if
			
		case ForceMultipleCoils:			' Write DO multiple
			if length >= 8 and len(data) >= 14 then
				modbusStartReference = asc(mid(data, 9, 1)) * 256 + asc(mid(data, 10, 1))
				modbusCount = asc(mid(data, 11, 1)) * 256 + asc(mid(data, 12, 1))
				' Check length 
				modbusLenMultipleData = modbusCount / 8
				if modbusCount mod 8 <> 0 then
					modbusLenMultipleData = modbusLenMultipleData + 1
				end if
				if (length = len(data) + 6) and (modbusLenMultipleData = asc(mid(data, 13, 1))) and (length = modbusLenMultipleData + 7) then
					j = 1
					k = 0
					for i = 1 to modbusCount
						if j = 1 then
							modbusValue = asc(mid(data, 14 + k, 1))
						end if
						if (modbusValue and &h1) = 1 then
							io_set(modbusStartReference, 1)
						else 
							io_set(modbusStartReference, 0)
						end if
						modbusValue = modbusValue shr 1
						modbusStartReference = modbusStartReference + 1
						if j = 8 then
							j = 1
							k = k + 1
						else
							j = j + 1
						end if
					next i
					modbus_tcp_send(socketTCP, transactionId, protocolId, modbusUnitId, modbusFunction, mid(data, 9, 4))
				end if
			end if
			
		case PresetMultipleRegisters:		' Write AO multiple
			if length >= 9 and len(data) >= 15 then
				modbusStartReference = asc(mid(data, 9, 1)) * 256 + asc(mid(data, 10, 1))
				modbusCount = asc(mid(data, 11, 1)) * 256 + asc(mid(data, 12, 1))
				' Check length 
				if (length = len(data) - 6) and (modbusCount * 2 = asc(mid(data, 13, 1))) and (length = modbusCount * 2 + 7) then
					for i = 1 to modbusCount
						modbusValue = asc(mid(data, 13 + i*2, 1)) * 256 + asc(mid(data, 12 + i*2, 1))
						modbus_set_holding_register(modbusStartReference, modbusValue)
						modbusStartReference = modbusStartReference + 1
					next i
					modbus_tcp_send(socketTCP, transactionId, protocolId, modbusUnitId, modbusFunction, mid(data, 9, 4))
				end if
			end if
			
		end select

#ifdef MODBUSUNITID
	end if
#endif

end sub

function modbus_set_holding_register(register as word, value as word) as boolean
	
	if register >= MODBUS_DAC_HOLDING_REGISTER and register < MODBUS_DAC_HOLDING_REGISTER + MAX_ANALOG_LINES then					' DAC Output HEX
		modbus_set_holding_register = analog_set(register, value, false)
		exit function
	end if

	if register >= MODBUS_PWM_PULSE_HOLDING_REGISTER and register < MODBUS_PWM_PULSE_HOLDING_REGISTER + MAX_ANALOG_LINES then					' PWM Pulse Output HEX
		analog_pwm_pulse(register - MODBUS_PWM_PULSE_HOLDING_REGISTER) = value
		analog_pwm_change(register - MODBUS_PWM_PULSE_HOLDING_REGISTER) = true
		modbus_set_holding_register = true
		exit function
	end if

	if register >= MODBUS_PWM_PERIOD_HOLDING_REGISTER and register < MODBUS_PWM_PERIOD_HOLDING_REGISTER + MAX_ANALOG_LINES then					' PWM Period Output HEX
		analog_pwm_period(register - MODBUS_PWM_PERIOD_HOLDING_REGISTER) = value
		analog_pwm_change(register - MODBUS_PWM_PERIOD_HOLDING_REGISTER) = true
		modbus_set_holding_register = true
		exit function
	end if

	modbus_set_holding_register = false

end function

function modbus_get_holding_register(register as word) as word
	
	if register >= MODBUS_DAC_HOLDING_REGISTER and register < MODBUS_DAC_HOLDING_REGISTER + MAX_ANALOG_LINES then			' DAC output HEX
		modbus_get_holding_register = analog_values(register)
		exit function
	end if

	if register >= MODBUS_PWM_PULSE_HOLDING_REGISTER and register < MODBUS_PWM_PULSE_HOLDING_REGISTER + MAX_ANALOG_LINES then			' PWM Pulse output HEX
		modbus_get_holding_register = analog_pwm_pulse(register - MODBUS_PWM_PULSE_HOLDING_REGISTER)
		exit function
	end if

	if register >= MODBUS_PWM_PERIOD_HOLDING_REGISTER and register < MODBUS_PWM_PERIOD_HOLDING_REGISTER + MAX_ANALOG_LINES then			' PWM Period output HEX
		modbus_get_holding_register = analog_pwm_period(register - MODBUS_PWM_PERIOD_HOLDING_REGISTER)
		exit function
	end if

	modbus_get_holding_register = &Hffff				' Unknown register

end function

function modbus_get_input_register(register as word) as word
	
	dim floatAsDWord as dword
	dim part as byte

	if register >= MODBUS_ADC_INPUT_REGISTER_HEX and register < MODBUS_ADC_INPUT_REGISTER_HEX + MAX_ANALOG_LINES then		' ADC input HEX
		modbus_get_input_register = analog_values(register)
		exit function
	end if
	
	if register >= MODBUS_ADC_INPUT_REGISTER_FLOAT and register < MODBUS_ADC_INPUT_REGISTER_FLOAT + (MAX_ANALOG_LINES * 2) then		' ADC input Float
		floatAsDWord = FloatToDWord(analog_float_values((register - MODBUS_ADC_INPUT_REGISTER_FLOAT) / 2))
		if (register - MODBUS_ADC_INPUT_REGISTER_FLOAT) mod 2 = 0 then
			modbus_get_input_register = floatAsDWord and &Hffff
		else
			modbus_get_input_register = (floatAsDWord shr 16) and &Hffff
		end if
		exit function
	end if

	if register >= MODBUS_COUNTER_INPUT_REGISTER and register < MODBUS_COUNTER_INPUT_REGISTER + (NUM_OF_IO * 2) then						' COUNTER registers then
		if (register - MODBUS_COUNTER_INPUT_REGISTER) mod 2 = 0 then
			modbus_get_input_register = io_cn((register - MODBUS_COUNTER_INPUT_REGISTER) / 2).counter
		else
			modbus_get_input_register = (io_cn((register - MODBUS_COUNTER_INPUT_REGISTER) / 2).counter shr 16) and &Hffff
		end if
		exit function
	end if
	
	if register >= MODBUS_BP_LIST_PORT1_INPUT_REGISTER and register < MODBUS_BP_LIST_PORT1_INPUT_REGISTER + (BP_SENSORS_MAX_ON_PORT * 9) then		' List of BP sensors for PORT1
		part = (register - MODBUS_BP_LIST_PORT1_INPUT_REGISTER) mod 9
		select case part
		case 0: modbus_get_input_register = bp_sensors(0, (register - MODBUS_BP_LIST_PORT1_INPUT_REGISTER) / 9).UnitID
		case 1: modbus_get_input_register = bp_sensors(0, (register - MODBUS_BP_LIST_PORT1_INPUT_REGISTER) / 9).SensorType
		case 2: modbus_get_input_register = bp_sensors(0, (register - MODBUS_BP_LIST_PORT1_INPUT_REGISTER) / 9).NoResponceCount
		case 3: modbus_get_input_register = bp_sensors(0, (register - MODBUS_BP_LIST_PORT1_INPUT_REGISTER) / 9).Data1
		case 4: modbus_get_input_register = bp_sensors(0, (register - MODBUS_BP_LIST_PORT1_INPUT_REGISTER) / 9).Data2
		case 5: modbus_get_input_register = bp_sensors(0, (register - MODBUS_BP_LIST_PORT1_INPUT_REGISTER) / 9).Data3
		case 6: modbus_get_input_register = bp_sensors(0, (register - MODBUS_BP_LIST_PORT1_INPUT_REGISTER) / 9).Data4
		case 7: modbus_get_input_register = bp_sensors(0, (register - MODBUS_BP_LIST_PORT1_INPUT_REGISTER) / 9).Data5
		case 8: modbus_get_input_register = bp_sensors(0, (register - MODBUS_BP_LIST_PORT1_INPUT_REGISTER) / 9).Data6
		case else: modbus_get_input_register = &Hffff
		end select
		exit function
	end if
	
	if register >= MODBUS_BP_LIST_PORT2_INPUT_REGISTER and register < MODBUS_BP_LIST_PORT2_INPUT_REGISTER + (BP_SENSORS_MAX_ON_PORT * 9) then		' List of BP sensors for PORT2
		part = (register - MODBUS_BP_LIST_PORT2_INPUT_REGISTER) mod 9
		select case part
		case 0: modbus_get_input_register = bp_sensors(1, (register - MODBUS_BP_LIST_PORT2_INPUT_REGISTER) / 9).UnitID
		case 1: modbus_get_input_register = bp_sensors(1, (register - MODBUS_BP_LIST_PORT2_INPUT_REGISTER) / 9).SensorType
		case 2: modbus_get_input_register = bp_sensors(1, (register - MODBUS_BP_LIST_PORT2_INPUT_REGISTER) / 9).NoResponceCount
		case 3: modbus_get_input_register = bp_sensors(1, (register - MODBUS_BP_LIST_PORT2_INPUT_REGISTER) / 9).Data1
		case 4: modbus_get_input_register = bp_sensors(1, (register - MODBUS_BP_LIST_PORT2_INPUT_REGISTER) / 9).Data2
		case 5: modbus_get_input_register = bp_sensors(1, (register - MODBUS_BP_LIST_PORT2_INPUT_REGISTER) / 9).Data3
		case 6: modbus_get_input_register = bp_sensors(1, (register - MODBUS_BP_LIST_PORT2_INPUT_REGISTER) / 9).Data4
		case 7: modbus_get_input_register = bp_sensors(1, (register - MODBUS_BP_LIST_PORT2_INPUT_REGISTER) / 9).Data5
		case 8: modbus_get_input_register = bp_sensors(1, (register - MODBUS_BP_LIST_PORT2_INPUT_REGISTER) / 9).Data6
		case else: modbus_get_input_register = &Hffff
		end select
		exit function
	end if
	
	if register >= MODBUS_BP_LIST_PORT3_INPUT_REGISTER and register < MODBUS_BP_LIST_PORT3_INPUT_REGISTER + (BP_SENSORS_MAX_ON_PORT * 9) then		' List of BP sensors for PORT3
		part = (register - MODBUS_BP_LIST_PORT3_INPUT_REGISTER) mod 9
		select case part
		case 0: modbus_get_input_register = bp_sensors(2, (register - MODBUS_BP_LIST_PORT3_INPUT_REGISTER) / 9).UnitID
		case 1: modbus_get_input_register = bp_sensors(2, (register - MODBUS_BP_LIST_PORT3_INPUT_REGISTER) / 9).SensorType
		case 2: modbus_get_input_register = bp_sensors(2, (register - MODBUS_BP_LIST_PORT3_INPUT_REGISTER) / 9).NoResponceCount
		case 3: modbus_get_input_register = bp_sensors(2, (register - MODBUS_BP_LIST_PORT3_INPUT_REGISTER) / 9).Data1
		case 4: modbus_get_input_register = bp_sensors(2, (register - MODBUS_BP_LIST_PORT3_INPUT_REGISTER) / 9).Data2
		case 5: modbus_get_input_register = bp_sensors(2, (register - MODBUS_BP_LIST_PORT3_INPUT_REGISTER) / 9).Data3
		case 6: modbus_get_input_register = bp_sensors(2, (register - MODBUS_BP_LIST_PORT3_INPUT_REGISTER) / 9).Data4
		case 7: modbus_get_input_register = bp_sensors(2, (register - MODBUS_BP_LIST_PORT3_INPUT_REGISTER) / 9).Data5
		case 8: modbus_get_input_register = bp_sensors(2, (register - MODBUS_BP_LIST_PORT3_INPUT_REGISTER) / 9).Data6
		case else: modbus_get_input_register = &Hffff
		end select
		exit function
	end if
	
	if register >= MODBUS_BP_LIST_PORT4_INPUT_REGISTER and register < MODBUS_BP_LIST_PORT4_INPUT_REGISTER + (BP_SENSORS_MAX_ON_PORT * 9) then		' List of BP sensors for PORT4
		part = (register - MODBUS_BP_LIST_PORT4_INPUT_REGISTER) mod 9
		select case part
		case 0: modbus_get_input_register = bp_sensors(3, (register - MODBUS_BP_LIST_PORT4_INPUT_REGISTER) / 9).UnitID
		case 1: modbus_get_input_register = bp_sensors(3, (register - MODBUS_BP_LIST_PORT4_INPUT_REGISTER) / 9).SensorType
		case 2: modbus_get_input_register = bp_sensors(3, (register - MODBUS_BP_LIST_PORT4_INPUT_REGISTER) / 9).NoResponceCount
		case 3: modbus_get_input_register = bp_sensors(3, (register - MODBUS_BP_LIST_PORT4_INPUT_REGISTER) / 9).Data1
		case 4: modbus_get_input_register = bp_sensors(3, (register - MODBUS_BP_LIST_PORT4_INPUT_REGISTER) / 9).Data2
		case 5: modbus_get_input_register = bp_sensors(3, (register - MODBUS_BP_LIST_PORT4_INPUT_REGISTER) / 9).Data3
		case 6: modbus_get_input_register = bp_sensors(3, (register - MODBUS_BP_LIST_PORT4_INPUT_REGISTER) / 9).Data4
		case 7: modbus_get_input_register = bp_sensors(3, (register - MODBUS_BP_LIST_PORT4_INPUT_REGISTER) / 9).Data5
		case 8: modbus_get_input_register = bp_sensors(3, (register - MODBUS_BP_LIST_PORT4_INPUT_REGISTER) / 9).Data6
		case else: modbus_get_input_register = &Hffff
		end select
		exit function
	end if
	
	modbus_get_input_register = &Hffff			' Unknown register

end function

sub modbus_tcp_send(socket as byte, transactionId as word, protocolId as word, modbusUnitId as byte, modbusFunction as modbusFunc, byref data as string)
	
	dim packet as string(8)
	
	packet = chr(transactionId shr 8) + chr(transactionId and &hFF)
	packet = packet + chr(protocolId shr 8) + chr(protocolId and &hFF)
	packet = packet + chr(0) + chr(len(data) + 2)
	packet = packet + chr(modbusUnitId)
	packet = packet + chr(modbusFunction)
	
	sock.num = socket
	sock.setdata(packet)
	sock.setdata(data)
	sock.send()
	
end sub